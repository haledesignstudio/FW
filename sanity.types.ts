/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type KeynoteSpeaker = {
  _id: string;
  _type: "keynoteSpeaker";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  bio?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  position?: string;
  company?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = KeynoteSpeaker | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: speakersQuery
// Query: *[_type == "keynoteSpeaker"] | order(name asc) {    _id,    name,    bio,    image {      asset,      alt    },    position,    company  }
export type SpeakersQueryResult = Array<{
  _id: string;
  name: string | null;
  bio: string | null;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    alt: string | null;
  } | null;
  position: string | null;
  company: string | null;
}>;
// Variable: whatWeDoQuery
// Query: *[_type == "whatWeDo"][0] {    _id,    heading,    mainline,    cta,    mail,    statement1,    statement2,    statement3  }
export type WhatWeDoQueryResult = null;
// Variable: shareholderValueAnalyticsQuery
// Query: *[_type == "shareholderValueAnalytics"][0] {    _id,    headline,    question,    mainline,    statement1,    statement2,    cta1,    mail1,    cta2,    mail2,    embedLink  }
export type ShareholderValueAnalyticsQueryResult = null;
// Variable: keynoteQuery
// Query: *[_type == "keynote"][0] {    _id,    topicHeadline,    topicMainline,    topicStatement,    topicCTA1,    topicMail1,    topicCTA2,    topicCTA3,    topicMail3,    topicCarousel[] {      topicCarouselImage {        asset,        alt      },      topicCarouselHeadline,      topicCarouselDescription    },    speakerHeadline,    speakerMainline,    speakerStatement,    speakerCTA1,    speakerMail1,    speakerCTA2  }
export type KeynoteQueryResult = null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"keynoteSpeaker\"] | order(name asc) {\n    _id,\n    name,\n    bio,\n    image {\n      asset,\n      alt\n    },\n    position,\n    company\n  }\n": SpeakersQueryResult;
    "\n  *[_type == \"whatWeDo\"][0] {\n    _id,\n    heading,\n    mainline,\n    cta,\n    mail,\n    statement1,\n    statement2,\n    statement3\n  }\n": WhatWeDoQueryResult;
    "\n  *[_type == \"shareholderValueAnalytics\"][0] {\n    _id,\n    headline,\n    question,\n    mainline,\n    statement1,\n    statement2,\n    cta1,\n    mail1,\n    cta2,\n    mail2,\n    embedLink\n  }\n": ShareholderValueAnalyticsQueryResult;
    "\n  *[_type == \"keynote\"][0] {\n    _id,\n    topicHeadline,\n    topicMainline,\n    topicStatement,\n    topicCTA1,\n    topicMail1,\n    topicCTA2,\n    topicCTA3,\n    topicMail3,\n    topicCarousel[] {\n      topicCarouselImage {\n        asset,\n        alt\n      },\n      topicCarouselHeadline,\n      topicCarouselDescription\n    },\n    speakerHeadline,\n    speakerMainline,\n    speakerStatement,\n    speakerCTA1,\n    speakerMail1,\n    speakerCTA2\n  }\n": KeynoteQueryResult;
  }
}
