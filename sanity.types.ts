/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type KeynoteSpeaker = {
  _id: string;
  _type: "keynoteSpeaker";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  bio?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  position?: string;
  company?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = KeynoteSpeaker | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/app/insights/[slug]/page.tsx
// Variable: articleBySlugQuery
// Query: *[_type == "article" && slug.current == $slug][0]{    _id,    title,    "slug": slug.current,    byline,    datePublished,    image { asset, alt },    body[],    hasPdf,    "pdf": select(      hasPdf == true => { "url": pdfUpload.asset->url },      true => null    ),    hasAuthor,    "author": select(      hasAuthor == true => {        "name": authorName,        "position": authorPosition,        "bio": authorBio[],        "image": { "asset": authorImage.asset, "alt": authorImage.alt },        "linkedin": authorLinkedin      },      true => null    ),    hasRelatedStories,    "relatedStories": select(      hasRelatedStories == true => relatedStories[]{ title, link },      true => []    )  }
export type ArticleBySlugQueryResult = null;
// Variable: articleByIdQuery
// Query: *[_type == "article" && _id == $id][0]{    _id,    title,    "slug": slug.current,    byline,    datePublished,    image { asset, alt },    body[],    hasPdf,    "pdf": select(      hasPdf == true => { "url": pdfUpload.asset->url },      true => null    ),    hasAuthor,    "author": select(      hasAuthor == true => {        "name": authorName,        "position": authorPosition,        "bio": authorBio[],        "image": { "asset": authorImage.asset, "alt": authorImage.alt },        "linkedin": authorLinkedin      },      true => null    ),    hasRelatedStories,    "relatedStories": select(      hasRelatedStories == true => relatedStories[]{ title, link },      true => []    )  }
export type ArticleByIdQueryResult = null;
// Variable: mindbulletsQuery
// Query: *[_type == "mindbullet"] | order(publishedAt desc)[0...12]{    _id,    title,    "slug": slug.current,    mainImage { asset, alt },    body[]  }
export type MindbulletsQueryResult = Array<never>;

// Source: ./src/app/insights/[slug]/pdf/route.ts
// Variable: articlePdfQuery
// Query: *[_type == "article" && slug.current == $slug][0]{    title,    "pdfUrl": pdfUpload.asset->url  }
export type ArticlePdfQueryResult = null;

// Source: ./src/app/keynotes/[slug]/page.tsx
// Variable: speakerBySlugQuery
// Query: *[_type == "keynoteSpeaker" && slug.current == $slug][0]{    _id,    name,    "slug": slug.current,    bio,    summary,    image { asset, alt },    domainsOfExcellence,    socialLinks,    mailtoSubject  }
export type SpeakerBySlugQueryResult = {
  _id: string;
  name: string | null;
  slug: null;
  bio: string | null;
  summary: null;
  image: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    alt: string | null;
  } | null;
  domainsOfExcellence: null;
  socialLinks: null;
  mailtoSubject: null;
} | null;

// Source: ./src/app/mindbullets/[slug]/page.tsx
// Variable: mindbulletBySlugQuery
// Query: *[_type == "mindbullet" && slug.current == $slug][0]{    _id,    title,    "slug": slug.current,    mainImage { asset, alt },    publishedAt,    dateline,    byLine,    body,    RelatedStories[] { title, link }  }
export type MindbulletBySlugQueryResult = null;
// Variable: moreMindbulletsQuery
// Query: *[_type == "mindbullet" && defined(slug.current) && slug.current != $slug]    | order(publishedAt desc)[0..11]{      _id,      title,      "slug": slug.current,      "imageUrl": coalesce(mainImage.asset->url, ""),      "description": pt::text(body)    }
export type MoreMindbulletsQueryResult = Array<never>;

// Source: ./src/app/people/apply/page.tsx
// Variable: careersQuery
// Query: *[_type == "career" && defined(jobTitle)]{    "title": jobTitle  } | order(title asc)
export type CareersQueryResult = Array<never>;

// Source: ./src/app/podcast/[slug]/page.tsx
// Variable: podcastBySlugQuery
// Query: *[_type == "podcast" && slug.current == $slug][0]{    _id,    headline,    "slug": slug.current,    description,    embedLink,    headerImage { asset, alt }  }
export type PodcastBySlugQueryResult = null;
// Variable: podcastPageMetaQuery
// Query: *[_type == "podcastPage"][0]{    title,    subheading  }
export type PodcastPageMetaQueryResult = null;

// Source: ./src/app/the-edge/[slug]/page.tsx
// Variable: scenarioBySlugQuery
// Query: *[_type == "provocativeScenario" && slug.current == $slug][0]{    _id,    title,    "slug": slug.current,    subheading,    contentText,    finalStatement,                           "pdfMobileUrl": pdfMobile.asset->url,    "pdfDesktopUrl": pdfDesktop.asset->url,    "hasAudio": hasAudio == "yes",    audioDescription,    "audioFileUrl": audioFile.asset->url,    "articleContents": articleContents[]{      title,      description,      "image": { "url": image.asset->url, "alt": image.alt }    }  }
export type ScenarioBySlugQueryResult = null;

// Source: ./src/app/the-edge/[slug]/pdf/route.ts
// Variable: scenarioQuery
// Query: *[_type == "provocativeScenario" && slug.current == $slug][0]{    title,    "pdfMobileUrl": pdfMobile.asset->url,    "pdfDesktopUrl": pdfDesktop.asset->url  }
export type ScenarioQueryResult = null;

// Source: ./src/components/mindbulletsArchive.tsx
// Variable: mindbulletsArchiveQuery
// Query: *[_type == "mindbullet"] | order(publishedAt desc) {    _id,    title,    "slug": slug.current,    mainImage {      asset,      alt    },    publishedAt,    dateline,    byLine  }
export type MindbulletsArchiveQueryResult = Array<never>;

// Source: ./src/lib/caseStudies.ts
// Variable: CASE_STUDIES_QUERY
// Query: *[_type == "caseStudy"] | order(_createdAt desc) {    _id,    title,    subheading,    mainImage,    slug  }
export type CASE_STUDIES_QUERYResult = Array<never>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"article\" && slug.current == $slug][0]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    byline,\n    datePublished,\n    image { asset, alt },\n    body[],\n\n    hasPdf,\n    \"pdf\": select(\n      hasPdf == true => { \"url\": pdfUpload.asset->url },\n      true => null\n    ),\n\n\n    hasAuthor,\n    \"author\": select(\n      hasAuthor == true => {\n        \"name\": authorName,\n        \"position\": authorPosition,\n        \"bio\": authorBio[],\n        \"image\": { \"asset\": authorImage.asset, \"alt\": authorImage.alt },\n        \"linkedin\": authorLinkedin\n      },\n      true => null\n    ),\n\n\n    hasRelatedStories,\n    \"relatedStories\": select(\n      hasRelatedStories == true => relatedStories[]{ title, link },\n      true => []\n    )\n  }\n": ArticleBySlugQueryResult;
    "\n  *[_type == \"article\" && _id == $id][0]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    byline,\n    datePublished,\n    image { asset, alt },\n    body[],\n\n    hasPdf,\n    \"pdf\": select(\n      hasPdf == true => { \"url\": pdfUpload.asset->url },\n      true => null\n    ),\n\n    hasAuthor,\n    \"author\": select(\n      hasAuthor == true => {\n        \"name\": authorName,\n        \"position\": authorPosition,\n        \"bio\": authorBio[],\n        \"image\": { \"asset\": authorImage.asset, \"alt\": authorImage.alt },\n        \"linkedin\": authorLinkedin\n      },\n      true => null\n    ),\n\n    hasRelatedStories,\n    \"relatedStories\": select(\n      hasRelatedStories == true => relatedStories[]{ title, link },\n      true => []\n    )\n  }\n": ArticleByIdQueryResult;
    "\n  *[_type == \"mindbullet\"] | order(publishedAt desc)[0...12]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    mainImage { asset, alt },\n    body[]\n  }\n": MindbulletsQueryResult;
    "\n  *[_type == \"article\" && slug.current == $slug][0]{\n    title,\n    \"pdfUrl\": pdfUpload.asset->url\n  }\n": ArticlePdfQueryResult;
    "\n  *[_type == \"keynoteSpeaker\" && slug.current == $slug][0]{\n    _id,\n    name,\n    \"slug\": slug.current,\n    bio,\n    summary,\n    image { asset, alt },\n    domainsOfExcellence,\n    socialLinks,\n    mailtoSubject\n  }\n": SpeakerBySlugQueryResult;
    "\n  *[_type == \"mindbullet\" && slug.current == $slug][0]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    mainImage { asset, alt },\n    publishedAt,\n    dateline,\n    byLine,\n    body,\n    RelatedStories[] { title, link }\n  }\n": MindbulletBySlugQueryResult;
    "\n  *[_type == \"mindbullet\" && defined(slug.current) && slug.current != $slug]\n    | order(publishedAt desc)[0..11]{\n      _id,\n      title,\n      \"slug\": slug.current,\n      \"imageUrl\": coalesce(mainImage.asset->url, \"\"),\n      \"description\": pt::text(body)\n    }\n": MoreMindbulletsQueryResult;
    "\n  *[_type == \"career\" && defined(jobTitle)]{\n    \"title\": jobTitle\n  } | order(title asc)\n": CareersQueryResult;
    "\n  *[_type == \"podcast\" && slug.current == $slug][0]{\n    _id,\n    headline,\n    \"slug\": slug.current,\n    description,\n    embedLink,\n    headerImage { asset, alt }\n  }\n": PodcastBySlugQueryResult;
    "\n  *[_type == \"podcastPage\"][0]{\n    title,\n    subheading\n  }\n": PodcastPageMetaQueryResult;
    "\n  *[_type == \"provocativeScenario\" && slug.current == $slug][0]{\n    _id,\n    title,\n    \"slug\": slug.current,\n    subheading,\n    contentText,\n    finalStatement,                       \n    \"pdfMobileUrl\": pdfMobile.asset->url,\n    \"pdfDesktopUrl\": pdfDesktop.asset->url,\n    \"hasAudio\": hasAudio == \"yes\",\n    audioDescription,\n    \"audioFileUrl\": audioFile.asset->url,\n    \"articleContents\": articleContents[]{\n      title,\n      description,\n      \"image\": { \"url\": image.asset->url, \"alt\": image.alt }\n    }\n  }\n": ScenarioBySlugQueryResult;
    "\n  *[_type == \"provocativeScenario\" && slug.current == $slug][0]{\n    title,\n    \"pdfMobileUrl\": pdfMobile.asset->url,\n    \"pdfDesktopUrl\": pdfDesktop.asset->url\n  }\n": ScenarioQueryResult;
    "\n  *[_type == \"mindbullet\"] | order(publishedAt desc) {\n    _id,\n    title,\n    \"slug\": slug.current,\n    mainImage {\n      asset,\n      alt\n    },\n    publishedAt,\n    dateline,\n    byLine\n  }\n": MindbulletsArchiveQueryResult;
    "\n  *[_type == \"caseStudy\"] | order(_createdAt desc) {\n    _id,\n    title,\n    subheading,\n    mainImage,\n    slug\n  }\n": CASE_STUDIES_QUERYResult;
  }
}
